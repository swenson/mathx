package decimal

import "testing"

func TestInputOutput(t *testing.T) {
	cases := []string{"0.0", "-1", "-1.0", "-1.01", "-123.456", "123123123123444444.412341923480192384901"}
	for _, c := range cases {
		d, err := New(c)
		if err != nil {
			t.Fatalf("Error reading in perfectly ordinary decimal %s: %s", c, err.Error())
		}
		out := d.String()
		if out != c {
			t.Errorf("Decimal string of %s was unexpectedly %s", c, out)
		}
	}
}

func TestAdd(t *testing.T) {
	cases := []struct {
		a string
		b string
		c string
	}{
		{"9999999999999999999999999999999999999999999.999999999999999999999999999999999999999999999999999999999999999999999999", "9999999999999999999999999999999999999999999.999999999999999999999999999999999999999999999999999999999999999999999999", "19999999999999999999999999999999999999999999.999999999999999999999999999999999999999999999999999999999999999999999998"},
		{"1.0", "2.0", "3.0"},
		{"548.394", "4.96", "553.354"},
		{"538.311", "44.35", "582.661"},
		{"715.590", "16.91", "732.500"},
		{"695.150", "70.70", "765.850"},
		{"95.861", "80.25", "176.111"},
		{"674.142", "83.74", "757.882"},
		{"220.135", "97.84", "317.975"},
		{"561.068", "37.57", "598.638"},
		{"293.068", "87.49", "380.558"},
		{"718.954", "11.36", "730.314"},
		{"643.387", "95.15", "738.537"},
		{"953.067", "90.57", "1043.637"},
		{"19.033", "79.53", "98.563"},
		{"163.030", "67.22", "230.250"},
		{"721.841", "34.95", "756.791"},
		{"301.709", "64.9", "366.609"},
		{"882.152", "89.14", "971.292"},
		{"58.466", "82.47", "140.936"},
		{"23.646", "40.99", "64.636"},
		{"105.824", "80.22", "186.044"},
		{"702.045", "319.338", "1021.383"},
		{"220.007", "897.540", "1117.547"},
		{"854.577", "979.499", "1834.076"},
		{"11.741", "385.664", "397.405"},
		{"363.699", "453.389", "817.088"},
		{"833.315", "159.113", "992.428"},
		{"137.569", "211.929", "349.498"},
		{"496.150", "351.481", "847.631"},
		{"763.600", "907.211", "1670.811"},
		{"809.730", "337.502", "1147.232"},
		{"226.261", "889.723", "1115.984"},
		{"529.048", "254.871", "783.919"},
		{"281.398", "458.827", "740.225"},
		{"929.736", "138.801", "1068.537"},
		{"352.873", "236.290", "589.163"},
		{"456.229", "8.915", "465.144"},
		{"670.134", "303.526", "973.660"},
		{"80.176", "236.571", "316.747"},
		{"382.310", "389.730", "772.040"},
		{"609.810", "895.486", "1505.296"},
		{"171.372", "898.312", "1069.684"},
		{"20.813", "336.675", "357.488"},
		{"809.832", "382.068", "1191.900"},
		{"876.240", "984.711", "1860.951"},
		{"326.442", "295.693", "622.135"},
		{"775.400", "821.313", "1596.713"},
		{"156.845", "883.854", "1040.699"},
		{"939.067", "250.284", "1189.351"},
		{"658.687", "105.241", "763.928"},
		{"491.052", "328.040", "819.092"},
		{"503.106", "776.331", "1279.437"},
		{"16.159", "608.586", "624.745"},
		{"165.655", "152.481", "318.136"},
		{"663.110", "401.588", "1064.698"},
		{"717.059", "596.542", "1313.601"},
		{"710.102", "723.640", "1433.742"},
		{"340.371", "951.493", "1291.864"},
		{"980.834", "37.553", "1018.387"},
		{"668.066", "332.824", "1000.890"},
		{"193.483", "890.961", "1084.444"},
		{"240.542", "357.214", "597.756"},
		{"864.400", "375.976", "1240.376"},
		{"924.019", "699.725", "1623.744"},
		{"385.774", "900.493", "1286.267"},
		{"653.632", "15.627", "669.259"},
		{"351.761", "287.994", "639.755"},
		{"36.147", "620.249", "656.396"},
		{"521.090", "609.291", "1130.381"},
		{"316.590", "206.401", "522.991"},
		{"630.750", "312.786", "943.536"},
		{"255.046", "619.107", "874.153"},
		{"836.635", "874.755", "1711.390"},
		{"374.852", "506.523", "881.375"},
		{"926.175", "469.619", "1395.794"},
		{"126.206", "780.376", "906.582"},
		{"191.127", "349.483", "540.610"},
		{"117.127", "352.912", "470.039"},
		{"25.604", "423.420", "449.024"},
		{"733.104", "516.245", "1249.349"},
		{"27.211", "797.847", "825.058"},
		{"694.082", "460.872", "1154.954"},
		{"867.497", "510.827", "1378.324"},
		{"307.716", "569.585", "877.301"},
		{"661.125", "249.866", "910.991"},
		{"358.930", "304.398", "663.328"},
		{"957.852", "307.816", "1265.668"},
		{"994.418", "976.319", "1970.737"},
		{"240.226", "244.515", "484.741"},
		{"744.774", "163.375", "908.149"},
		{"295.550", "424.074", "719.624"},
		{"964.765", "822.753", "1787.518"},
		{"127.055", "541.010", "668.065"},
		{"856.973", "859.664", "1716.637"},
		{"128.324", "740.714", "869.038"},
		{"500.775", "130.733", "631.508"},
		{"533.071", "154.919", "687.990"},
		{"496.700", "238.808", "735.508"},
		{"324.653", "543.612", "868.265"},
		{"239.717", "649.079", "888.796"},
		{"64.332", "82.739", "147.071"},
		{"411.246", "30.168", "441.414"},
		{"416.577", "245.679", "662.256"},
		{"630.600", "355.708", "986.308"},
		{"941.288", "640.161", "1581.449"},
		{"669.364", "170.052", "839.416"},
		{"711.115", "76.923", "788.038"},
		{"9.697", "177.473", "187.170"},
		{"285.324", "285.177", "570.501"},
		{"746.840", "641.362", "1388.202"},
		{"268.409", "445.092", "713.501"},
		{"417.815", "607.810", "1025.625"},
		{"66.992", "170.440", "237.432"},
		{"26.136", "804.255", "830.391"},
		{"938.978", "71.824", "1010.802"},
		{"271.072", "229.580", "500.652"},
		{"697.818", "25.902", "723.720"},
		{"786.274", "678.630", "1464.904"},
		{"907.454", "178.932", "1086.386"},
		{"8.124", "208.968", "217.092"},
		{"827.109", "251.090", "1078.199"},
		{"535.469", "488.618", "1024.087"},
		{"943.202", "491.569", "1434.771"},
		{"717.735", "997.552", "1715.287"},
		{"205.597", "365.402", "570.999"},
		{"251.144", "852.056", "1103.200"},
		{"785.418", "218.058", "1003.476"},
		{"904.976", "220.722", "1125.698"},
		{"115.908", "56.210", "172.118"},
		{"697.535", "970.322", "1667.857"},
		{"452.880", "40.167", "493.047"},
	}

	for _, c := range cases {
		a, err := New(c.a)
		if err != nil {
			t.Fatalf("Error reading in perfectly ordinary decimal %s: %s", c.a, err.Error())
		}
		b, err := New(c.b)
		if err != nil {
			t.Fatalf("Error reading in perfectly ordinary decimal %s: %s", c.b, err.Error())
		}
		s := a.Add(b).String()
		if s != c.c {
			t.Errorf("%s + %s = %s but should be %s", c.a, c.b, s, c.c)
		}
	}
}
